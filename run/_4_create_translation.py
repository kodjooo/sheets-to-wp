import requests
import openai
from requests.auth import HTTPBasicAuth
from _5_taxonomy_and_attributes import assign_attributes_to_product
from _6_create_variations import create_variations
from _3_create_product import get_jwt_token
from _3_create_product import get_category_id_by_name
import logging
import json  

def create_product_pt(row, en_product_id, attributes=None, last_variations=None, config=None):
    auth = HTTPBasicAuth(config["consumer_key"], config["consumer_secret"])
    base_url = config["wp_url"]

    logging.info("üåç –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π")
    logging.debug("üì¶ –ü–æ–ª—É—á–µ–Ω—ã last_variations –≤ create_product_pt: %s", json.dumps(last_variations or [], ensure_ascii=False))

    # –ü–æ–ª—É—á–∞–µ–º slug –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    response_en = requests.get(
        f"{base_url}/wp-json/wc/v3/products/{en_product_id}",
        auth=auth
    )
    response_en.raise_for_status()
    en_product_data = response_en.json()
    original_slug = en_product_data.get("slug", "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º slug
    data = {
        "title": row.get("RACE NAME (PT)", "") or row.get("RACE NAME", ""),
        "status": "draft",
        "lang": "pt",
        "slug": original_slug if original_slug else "",
        "translations": {
            "en": en_product_id
        }
    }

    # # –í–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    # image_id = row.get("IMAGE ID") or row.get("image_id")
    # if image_id:
    #     data["featured_media"] = int(image_id)

    logging.debug("üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: %s", json.dumps(data, ensure_ascii=False))

    try:
        categories_raw = set()
        main_category = row.get("CATEGORY")
        main_subcategory = row.get("SUBCATEGORY")
        if main_category:
            categories_raw.add((main_category, main_subcategory))
            logging.debug(f"üìÇ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è PT: ({main_category} ‚Üí {main_subcategory})")

        extra_cats = row.get("extra_categories")
        if isinstance(extra_cats, (set, list)):
            valid = []
            for item in extra_cats:
                if isinstance(item, (list, tuple)) and len(item) == 2:
                    category_name, subcategory_name = item
                    if category_name:
                        valid.append((category_name, subcategory_name))
            if valid:
                logging.debug(f"üìö –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ PT –ø–æ–ª—É—á–µ–Ω—ã: {valid}")
                categories_raw.update(valid)
            else:
                logging.debug(f"‚ö†Ô∏è –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ PT –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä (name, value): {extra_cats}")
        else:
            logging.debug("üìö –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ PT –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

        category_ids = []
        for parent_name, child_name in categories_raw:
            try:
                parent_id = get_category_id_by_name(parent_name)
                if parent_id:
                    category_ids.append({"id": parent_id})
                    if child_name:
                        child_id = get_category_id_by_name(child_name, parent_id=parent_id)
                        if child_id:
                            category_ids.append({"id": child_id})
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({parent_name} ‚Üí {child_name}): {e}")

        if category_ids:
            data["categories"] = category_ids
        response = requests.post(
            f"{base_url}/wp-json/wc/v3/products",
            auth=auth,
            json=data
        )
        response.raise_for_status()
        json_data = response.json()

        pt_id = json_data.get("id")
        logging.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω: ID={pt_id}")
        if not pt_id:
            raise Exception("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

        # # üñºÔ∏è –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ wp/v2
        # if image_id:
        #     token = get_jwt_token()  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Ç—ã –µ—ë —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
        #     wp_response = requests.post(
        #         f"{base_url}/wp-json/wp/v2/product/{pt_id}",
        #         headers={
        #             "Authorization": f"Bearer {token}",
        #             "Content-Type": "application/json"
        #         },
        #         json={"featured_media": int(image_id)}
        #     )
        #     if wp_response.ok:
        #         logging.info(f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ wp/v2 –¥–ª—è PT-–ø—Ä–æ–¥—É–∫—Ç–∞ ID={pt_id}")
        #     else:
        #         logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ wp/v2: {wp_response.status_code} ‚Äî {wp_response.text}")


        # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ title (–µ–≥–æ WPML –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å)
        update_payload = {
            "name": row.get("RACE NAME (PT)", "") or row.get("RACE NAME", ""),
            "lang": "pt"
        }
        update_response = requests.put(
            f"{base_url}/wp-json/wc/v3/products/{pt_id}",
            auth=auth,
            json=update_payload
        )
        if update_response.status_code == 200:
            logging.info(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É –ø–µ—Ä–µ–≤–æ–¥–∞ PT-–ø—Ä–æ–¥—É–∫—Ç–∞ ID={pt_id}")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ö–æ–¥={update_response.status_code}, –æ—Ç–≤–µ—Ç={update_response.text}")

        # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ACF-–ø–æ–ª—è —á–µ—Ä–µ–∑ ACF REST API
        benefits_pt = row.get("BENEFITS (PT)", "")
        if isinstance(benefits_pt, list):
            benefits_pt = "\n".join(benefits_pt)

        meta_update_payload = {
            "meta_data": [
                {"key": "event_short_description", "value": row.get("SUMMARY (PT)", "")},
                {"key": "organizer_description", "value": row.get("ORG INFO (PT)", "")},
                {"key": "race_benefits", "value": benefits_pt}
            ]
        }
        meta_update_response = requests.put(
            f"{base_url}/wp-json/wc/v3/products/{pt_id}",
            auth=auth,
            json=meta_update_payload
        )
        if meta_update_response.status_code == 200:
            logging.info(f"‚úÖ ACF-–ø–æ–ª—è (meta_data) –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É PT-–ø—Ä–æ–¥—É–∫—Ç–∞ ID={pt_id}")
        else:
            logging.warning(f"‚ö†Ô∏è meta_data –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ö–æ–¥={meta_update_response.status_code}, –æ—Ç–≤–µ—Ç={meta_update_response.text}")

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ WPML
        hook_payload = {
            "original_id": en_product_id,
            "translated_id": pt_id,
            "lang_code": "pt"
        }

        logging.info("üîó –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º —á–µ—Ä–µ–∑ WPML API")
        logging.debug("üì® –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: %s", json.dumps(hook_payload))

        try:
            hook_response = requests.post(
                f"{base_url}/wp-json/custom-api/v1/set-translation/",
                json=hook_payload,
                auth=auth
            )

            logging.debug("üì° –û—Ç–≤–µ—Ç WPML API: %s", hook_response.text)

            if not hook_response.ok:
                logging.error(f"‚ùå –°–≤—è–∑—å —á–µ—Ä–µ–∑ WPML API –Ω–µ —É–¥–∞–ª–∞—Å—å: {hook_response.status_code} ‚Äî {hook_response.text}")
            else:
                logging.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω: EN={en_product_id} ‚áÑ PT={pt_id}")

        except Exception as hook_error:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ WPML API: {hook_error}")

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ —Å–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        if attributes:
            logging.debug("üß© –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: %s", json.dumps(attributes, ensure_ascii=False))
            assign_attributes_to_product(pt_id, attributes)
        if last_variations:
            logging.info(f"üîÅ –°–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è PT-–ø—Ä–æ–¥—É–∫—Ç–∞ ID={pt_id}")
            logging.debug("üß¨ last_variations –¥–ª—è create_variations: %s", json.dumps(last_variations, ensure_ascii=False))
            create_variations(pt_id, last_variations)
        else:
            logging.warning("‚ö†Ô∏è last_variations –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã")

        return pt_id

    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
