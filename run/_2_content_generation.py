import requests
import time
import json
import openai
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader
from PIL import Image
from io import BytesIO
import base64
import logging
from _1_google_loader import load_config, get_logger
from _3_create_product import get_jwt_token

logger = get_logger()
logger.setLevel(logging.DEBUG)
config = load_config()
openai.api_key = config['openai_api_key']
OPENCAGE_API_KEY = config.get("opencage_api_key")

def extract_text_from_url(url):
    try:
        if url.lower().endswith(".pdf"):
            response = requests.get(url)
            response.raise_for_status()
            pdf_path = "/tmp/temp.pdf"
            with open(pdf_path, "wb") as f:
                f.write(response.content)
            logger.info(f"üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω PDF: {url}")  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
            return "", pdf_path
        else:
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            text = soup.get_text(separator=' ', strip=True)
            logger.info(f"üåê –û–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∞–π—Ç: {url}")  # ‚Üê –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Å–∞–π—Ç–∞
            return text.strip(), None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ {url}: {e}")
        return "", None

def translate_title_to_pt(title: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π —á–µ—Ä–µ–∑ GPT.
    """
    if not title:
        return ""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a professional translator."},
                {"role": "user", "content": f"Translate this race name from English to Portuguese without changing the meaning or inventing anything:\n\n{title}"}
            ],
            temperature=0.3
        )
        pt_title = response.choices[0].message.content.strip()
        logger.info(f"üåç –ü–µ—Ä–µ–≤–µ–¥—ë–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: '{title}' ‚Üí '{pt_title}'")
        return pt_title
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        return ""

def call_openai_assistant(text, file_ids=None, has_pdf=False):
    try:
        thread = openai.beta.threads.create()
        logger.info("üí¨ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥")

        assistant_id = config["assistant_id_pdf"] if has_pdf else config["assistant_id_text"]

        logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT (assistant_id=%s):\n%s", assistant_id, text[:40000])

        # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if file_ids:
            openai.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=text[:40000],
                attachments=[{"file_id": file_id, "tools": [{"type": "file_search"}]} for file_id in file_ids]
            )
        else:
            openai.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=text[:40000]
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=assistant_id
            # ‚¨ÖÔ∏è –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å—é–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º!
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled"]:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                return None
            time.sleep(2)

        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        reply = messages.data[0].content[0].text.value
        return json.loads(reply)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return None

def call_second_assistant(first_result):
    """–í—Ç–æ—Ä–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if "assistant_id_second" not in config:
            logger.warning("‚ö†Ô∏è ASSISTANT_ID_SECOND –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
            return None
            
        thread = openai.beta.threads.create()
        logger.info("üí¨ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")

        assistant_id = config["assistant_id_second"]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        edit_text = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–ª—É—á—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:

SUMMARY: {first_result.get('summary', '')}
ORG INFO: {first_result.get('org_info', '')}
BENEFITS: {first_result.get('benefits', '')}
SUMMARY (PT): {first_result.get('summary_pt', '')}
ORG INFO (PT): {first_result.get('org_info_pt', '')}
BENEFITS (PT): {first_result.get('benefits_pt', '')}
IMAGE PROMPT: {first_result.get('image_prompt', '')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ —Ç–æ–º –∂–µ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""

        logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (assistant_id=%s)", assistant_id)

        # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=edit_text
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=assistant_id
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled"]:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                return None
            time.sleep(2)

        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        reply = messages.data[0].content[0].text.value
        return json.loads(reply)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return None

def get_coordinates_from_location(location: str):
    if not location:
        return None, None
    url = f"https://api.opencagedata.com/geocode/v1/json?q={location}&key={OPENCAGE_API_KEY}&language=en&limit=1"
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    if data["results"]:
        lat = data["results"][0]["geometry"]["lat"]
        lon = data["results"][0]["geometry"]["lng"]
        return lat, lon
    return None, None

def check_wp_upload(jwt_token):
    wp_url = config["wp_url"].rstrip("/") + "/wp-json/wp/v2/media"
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Disposition": "attachment; filename=test.png"
    }
    minimal_png = base64.b64decode(
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8Xw8AAoMBgHKqLzMAAAAASUVORK5CYII="
    )

    try:
        response = requests.post(wp_url, headers=headers, files={"file": ("test.png", minimal_png)})
        if response.status_code == 201:
            media_id = response.json().get("id")
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WP —É—Å–ø–µ—à–Ω–∞, media ID: {media_id}")

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ä–∞–∑—É
            delete_url = f"{wp_url}/{media_id}?force=true"
            del_resp = requests.delete(delete_url, headers={"Authorization": f"Bearer {jwt_token}"})
            if del_resp.status_code == 200:
                logger.info("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω –∏–∑ WP")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: —Å—Ç–∞—Ç—É—Å {del_resp.status_code}")

            return True
        else:
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WP –Ω–µ—É–¥–∞—á–Ω–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WP: {e}")
        return False

def generate_image(prompt):
    jwt_token = get_jwt_token()
    if not check_wp_upload(jwt_token):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ WP (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π). –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return None

    def upload_to_wp(image_bytes, filename, jwt_token):
        try:
            wp_url = config["wp_url"].rstrip("/") + "/wp-json/wp/v2/media"
            headers = {
                "Authorization": f"Bearer {jwt_token}",
                "Content-Disposition": f"attachment; filename={filename}"
            }

            response = requests.post(wp_url, headers=headers, files={"file": (filename, image_bytes)})
            response.raise_for_status()
            wp_response = response.json()
            logger.info(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ WP: {wp_response.get('source_url')}")
            return {
                "id": wp_response.get("id"),
                "url": wp_response.get("source_url")
            }
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ WordPress: {e}")
            return None

    try:
        model_name = "gpt-image-1"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ {model_name}...")
        kwargs = {
            "model": model_name,
            "prompt": prompt,
            "n": 1,
            "quality": "high",
            "size": "1024x1024"
        }

        response = openai.images.generate(**kwargs)
        data = response.data[0]

        if hasattr(data, "url") and data.url:
            image_response = requests.get(data.url)
            image_response.raise_for_status()
            image_bytes = image_response.content
        elif hasattr(data, "b64_json") and data.b64_json:
            image_bytes = base64.b64decode(data.b64_json)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç {model_name}")
            return None

        filename = f"{int(time.time())}.png"
        image_info = upload_to_wp(image_bytes, filename, jwt_token)
        if image_info and "id" in image_info and "url" in image_info:
            return image_info  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º dict: {'url': ..., 'id': ...}

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {model_name}: {e}")

    return None