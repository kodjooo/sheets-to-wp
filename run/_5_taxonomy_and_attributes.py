import requests
import json
import logging
from woocommerce import API
from _1_google_loader import load_config

config = load_config()
wcapi = API(
    url=config["wp_url"],
    consumer_key=config["consumer_key"],
    consumer_secret=config["consumer_secret"],
    version="wc/v3"
)

HEADERS = {"Content-Type": "application/json"}


def get_or_create_attribute(name):
    response = wcapi.get("products/attributes")
    attributes = response.json()
    
    for attr in attributes:
        if attr['name'].lower() == name.lower():
            return attr['id']

    data = {"name": name, "type": "select"}
    new_attr = wcapi.post("products/attributes", data).json()
    return new_attr['id']


def get_or_create_attribute_term(attr_id, value):
    # –ï—Å–ª–∏ value ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if isinstance(value, list):
        if not value:
            return None
        value = value[0]

    if not value or value.strip() == "":
        logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∞ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ ID={attr_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä–º–∞.")
        return None

    response = wcapi.get(f"products/attributes/{attr_id}/terms")
    terms = response.json()

    for term in terms:
        if term['name'].lower() == value.lower():
            return term['id']

    data = {"name": value}
    logging.debug(f"üîß –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ä–º '{value}' –≤ –∞—Ç—Ä–∏–±—É—Ç–µ ID={attr_id}")
    response = wcapi.post(f"products/attributes/{attr_id}/terms", data)

    try:
        response.raise_for_status()
        term_data = response.json()
        if "id" not in term_data:
            logging.error("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'id' –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Ä–º–∞: %s", term_data)
            raise Exception("–ù–µ—Ç ID –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç WooCommerce –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Ä–º–∞")
        return term_data["id"]

    except requests.exceptions.HTTPError as e:
        if response.status_code == 400:
            try:
                error_data = response.json()
                if error_data.get("code") == "term_exists":
                    existing_id = error_data.get("data", {}).get("resource_id")
                    if existing_id:
                        logging.warning(f"‚ö†Ô∏è –¢–µ—Ä–º '{value}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID={existing_id}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.")
                        return existing_id
            except Exception as parse_error:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É term_exists: %s", parse_error)

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Ä–º–∞ '{value}' –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ {attr_id}: {response.text}")
        raise


def assign_attributes_to_product(product_id, attributes_dict):
    attr_payload = []
    variation_attrs = []

    for attr_name, value in attributes_dict.items():
        # –ï—Å–ª–∏ value ‚Äî –Ω–µ —Å–ø–∏—Å–æ–∫, –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–∫–æ–º
        values = value if isinstance(value, list) else [value]

        attr_id = get_or_create_attribute(attr_name)
        if attr_id is None:
            logging.warning(f"‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç '{attr_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        options = []
        for val in values:
            if not isinstance(val, str) or not val.strip():
                logging.info(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ '{attr_name}' –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            term_id = get_or_create_attribute_term(attr_id, val)
            if term_id is None:
                logging.warning(f"‚ö†Ô∏è –¢–µ—Ä–º '{val}' –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ '{attr_name}' –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            options.append(val)

            variation_attrs.append({
                "id": attr_id,
                "option": val
            })

        if not options:
            logging.info(f"‚ö†Ô∏è –î–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ '{attr_name}' –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        attr_payload.append({
            "id": attr_id,
            "variation": True,
            "visible": True,
            "options": options
        })

    if attr_payload:
        wcapi.put(f"products/{product_id}", {"attributes": attr_payload})
    else:
        logging.info(f"‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID={product_id} ‚Äî –ø—Ä–æ–ø—É—Å–∫ wcapi.put")

    return variation_attrs