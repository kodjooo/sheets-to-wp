import requests
from woocommerce import API
import json
import logging

from _1_google_loader import load_config
config = load_config()

wcapi = API(
    url=config["wp_url"],
    consumer_key=config["consumer_key"],
    consumer_secret=config["consumer_secret"],
    version="wc/v3"
)

def create_variations(product_id, variation_data_list):
    """
    –°–æ–∑–¥–∞—ë—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è variable-–ø—Ä–æ–¥—É–∫—Ç–∞.
    variation_data_list - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
    - regular_price (str)
    - attributes (list of dict) —Å –∫–ª—é—á–∞–º–∏ name –∏ option, –Ω–∞–ø—Ä–∏–º–µ—Ä:
      [{"name": "Type", "option": "Road Running"}, {"name": "Distance", "option": "10 km"}]
    """

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ (—á—Ç–æ–±—ã –≤–∑—è—Ç—å –∏—Ö id)
    response = wcapi.get(f"products/{product_id}")
    product = response.json()
    product_attributes = product.get("attributes", [])

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ id –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
    attr_name_to_id = {attr["name"]: attr["id"] for attr in product_attributes if "id" in attr}

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    existing_response = wcapi.get(f"products/{product_id}/variations")
    existing_response.raise_for_status()
    existing_variations = existing_response.json()

    # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    existing_combinations = set()
    for variation in existing_variations:
        combo = tuple(sorted((attr["name"], attr["option"]) for attr in variation.get("attributes", [])))
        existing_combinations.add(combo)

    for var_data in variation_data_list:
        attrs_for_api = []
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        combo_key = tuple(sorted((attr["name"], attr["option"]) for attr in var_data.get("attributes", []) if attr.get("name") and attr.get("option")))
        if combo_key in existing_combinations:
            print(f"‚ö†Ô∏è –í–∞—Ä–∏–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {combo_key}")
            continue

        for attr in var_data.get("attributes", []):
            name = attr.get("name")
            option = attr.get("option")

            if not name or not option:
                continue

            attr_id = attr_name_to_id.get(name)
            if not attr_id:
                print(f"‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø—Ä–æ–¥—É–∫—Ç–∞ ID={product_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            attrs_for_api.append({
                "id": attr_id,
                "option": option
            })

        payload = {
            "regular_price": var_data.get("regular_price", "0"),
            "attributes": attrs_for_api
        }

        try:
            logging.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {json.dumps(payload, ensure_ascii=False)}")
            res = wcapi.post(f"products/{product_id}/variations", payload)
            res.raise_for_status()
            logging.debug(f"üì• –û—Ç–≤–µ—Ç WooCommerce: {res.status_code} ‚Äî {res.text}")
            print("‚úÖ –í–∞—Ä–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:", payload)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}:", e, res.text if 'res' in locals() else "")