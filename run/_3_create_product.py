import json
import requests
import base64
import os
import datetime
import openai
from io import BytesIO
from PIL import Image
from wordpress_xmlrpc import Client, WordPressPost
from wordpress_xmlrpc.methods import media, posts
from wordpress_xmlrpc.compat import xmlrpc_client

from _1_google_loader import load_config

config = load_config()

WC_API_URL = config["wp_url"]
WC_CONSUMER_KEY = config["consumer_key"]
WC_CONSUMER_SECRET = config["consumer_secret"]

headers = {
    "Content-Type": "application/json"
}

def download_image_from_url(image_url):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    try:
        response = requests.get(image_url)
        response.raise_for_status()
        img = Image.open(BytesIO(response.content))
        filename = "generated_image.jpg"
        path = f"/tmp/{filename}"
        img.convert("RGB").save(path, format="JPEG", quality=90)
        return path
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")
        return None

def upload_image_from_path(image_path, token):
    try:
        with open(image_path, "rb") as img:
            image_data = img.read()
        filename = os.path.basename(image_path)

        response = requests.post(
            WC_API_URL + "/wp-json/wp/v2/media",
            headers={
                "Authorization": f"Bearer {token}",
                "Content-Disposition": f"attachment; filename={filename}",
                "Content-Type": "image/jpeg"
            },
            data=image_data
        )
        response.raise_for_status()
        return response.json()["id"]

    except requests.exceptions.HTTPError as e:
        print(f"üî• HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WP: {e}")
        if e.response is not None:
            print(f"üì¶ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
            try:
                print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", e.response.json())
            except ValueError:
                print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ JSON):", e.response.text)
        return None

    except Exception as e:
        print(f"‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WP: {e}")
        return None

def get_category_id_by_name(name, parent_id=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WooCommerce –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç.
    –ï—Å–ª–∏ parent_id —É–∫–∞–∑–∞–Ω, –∏—â–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —ç—Ç–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ parent_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∏—â–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å parent == 0 (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
    """
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
    response = requests.get(
        WC_API_URL + "/wp-json/wc/v3/products/categories",
        auth=(WC_CONSUMER_KEY, WC_CONSUMER_SECRET),
        params={"search": name}
    )
    response.raise_for_status()
    print("üîç –û—Ç–≤–µ—Ç –æ—Ç WooCommerce (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏):", response.text)
    categories = response.json()

    print(f"üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{name}': {len(categories)} –Ω–∞–π–¥–µ–Ω–æ")
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
    matched = [cat for cat in categories if cat["name"].lower() == name.lower()]

    # –ï—Å–ª–∏ –µ—Å—Ç—å parent_id ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
    if parent_id is not None:
        matched = [cat for cat in matched if cat.get("parent") == parent_id]
    else:
        # –ï—Å–ª–∏ parent_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∏—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å parent == 0 (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
        matched = [cat for cat in matched if cat.get("parent") == 0]

    if matched:
        cat = matched[0]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —Å ID {cat['id']} (parent: {cat.get('parent')})")
        return cat["id"]

    print(f"‚ùå –¢–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å parent_id={parent_id}")

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    payload = {
        "name": name,
        "slug": name.lower().replace(" ", "-")
    }
    if parent_id:
        payload["parent"] = parent_id
    create_response = requests.post(
        WC_API_URL + "/wp-json/wc/v3/products/categories",
        auth=(WC_CONSUMER_KEY, WC_CONSUMER_SECRET),
        headers=headers,
        data=json.dumps(payload)
    )
    create_response.raise_for_status()
    print("üîç –û—Ç–≤–µ—Ç –æ—Ç WooCommerce (–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞):", create_response.text)
    created_cat = create_response.json()
    print(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —Å ID {created_cat.get('id')}")
    return created_cat.get("id")

def get_jwt_token():
    admin_username = config["wp_admin_user"]
    admin_password = config["wp_admin_pass"]

    response = requests.post(
        f"{WC_API_URL}/wp-json/jwt-auth/v1/token",
        headers={"Content-Type": "application/json"},
        data=json.dumps({
            "username": admin_username,
            "password": admin_password
        })
    )
    response.raise_for_status()
    token = response.json().get("token")
    print("üîë –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω")
    return token

def format_date_ymd(date_str):
    if not date_str:
        return ""
    for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%Y/%m/%d", "%m/%d/%Y"):
        try:
            dt = datetime.datetime.strptime(date_str, fmt)
            return dt.strftime("%Y%m%d")
        except ValueError:
            continue
    return ""


def send_acf_data(product_id, acf_data, token):
    acf_headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    acf_response = requests.post(
        f"{WC_API_URL}/wp-json/acf/v3/product/{product_id}",
        headers=acf_headers,
        data=json.dumps(acf_data)
    )

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω ‚Äî –ø–æ–ª—É—á–∏–º –Ω–æ–≤—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    if acf_response.status_code == 401:
        print("üîÅ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        token = get_jwt_token()
        acf_headers["Authorization"] = f"Bearer {token}"
        acf_response = requests.post(
            f"{WC_API_URL}/wp-json/acf/v3/product/{product_id}",
            headers=acf_headers,
            data=json.dumps(acf_data)
        )

    return acf_response

def create_product(data):
    print("üëâ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞:")
    print(json.dumps(data, indent=2, ensure_ascii=False))

    data["EVENT START DATE"] = format_date_ymd(data.get("EVENT START DATE", ""))
    data["EVENT END DATE"] = format_date_ymd(data.get("EVENT END DATE", ""))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    product_data = {
        "name": data["RACE NAME"],
        "type": "variable",
        "status": "draft"
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories_raw = set()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories_raw = set()
    if data.get("ATTRIBUTE") and data.get("VALUE"):
        categories_raw.add((data["ATTRIBUTE"], data["VALUE"]))
        print(f"üìÇ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ({data['ATTRIBUTE']} ‚Üí {data['VALUE']})")

    extra_cats = data.get("extra_categories")
    if isinstance(extra_cats, (list, set)):
        valid = [item for item in extra_cats if isinstance(item, (list, tuple)) and len(item) == 2]
        if valid:
            print(f"üìö –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {valid}")
            categories_raw.update(valid)
        else:
            print(f"‚ö†Ô∏è –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä (name, value): {extra_cats}")
    else:
        print("üìö –î–æ–ø. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞—Ü–∏–π
    if isinstance(data.get("extra_categories"), (set, list)):
        categories_raw.update(set(data["extra_categories"]))

    category_ids = []
    for parent_name, child_name in categories_raw:
        try:
            parent_id = get_category_id_by_name(parent_name)
            if parent_id:
                category_ids.append({"id": parent_id})
                child_id = get_category_id_by_name(child_name, parent_id=parent_id)
                if child_id:
                    category_ids.append({"id": child_id})
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({parent_name} ‚Üí {child_name}): {e}")

    product_data["categories"] = category_ids

    print("üëâ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", product_data.get("categories"))

    # # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω image_url
    # image_id = data.get("IMAGE ID")

    # if image_id:
    #     print(f"üñº –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ID: {image_id}")
    #     product_data["images"] = [{"id": int(image_id)}]
    # elif "IMAGE URL" in data and data["IMAGE URL"]:
    #     # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ image_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
    #     try:
    #         token = get_jwt_token()
    #         local_path = download_image_from_url(data["IMAGE URL"])
    #         if local_path:
    #             uploaded_id = upload_image_from_path(local_path, token)
    #             if uploaded_id:
    #                 print(f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, ID: {uploaded_id}")
    #                 product_data["images"] = [{"id": uploaded_id}]
    #                 data["IMAGE ID"] = uploaded_id  # –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    #             else:
    #                 print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: image_id = None")
    #             os.remove(local_path)
    #     except Exception as e:
    #         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # –û—Å–Ω–æ–≤–Ω–æ–π POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    try:
        response = requests.post(
            WC_API_URL + "/wp-json/wc/v3/products",
            auth=(WC_CONSUMER_KEY, WC_CONSUMER_SECRET),
            headers=headers,
            data=json.dumps(product_data)
        )
        print("üßæ –û—Ç–≤–µ—Ç –æ—Ç WP –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", response.status_code, response.text)
        response.raise_for_status()
    except requests.exceptions.HTTPError as e:
        print(f"üî• HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        if e.response is not None:
            try:
                print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (JSON):", e.response.json())
            except Exception:
                print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–µ–∫—Å—Ç):", e.response.text)
        return None  # –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏–Ω–∞—á–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å
    else:
        product_id = response.json()["id"]
        print("üì¶ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω:", product_id)

    from decimal import Decimal, ROUND_DOWN

    def format_coord(value):
        return float(Decimal(value).quantize(Decimal("0.0001"), rounding=ROUND_DOWN))

    # ACF –¥–∞–Ω–Ω—ã–µ
    benefits = data.get("BENEFITS", "")
    if isinstance(benefits, list):
        benefits = "\n".join(benefits)

    acf_data = {
        "fields": {
            "event_date_start": data["EVENT START DATE"],
            "event_location_text": data["LOCATION"].split(",")[0] if data.get("LOCATION") else "",
            "event_ticket_url": data["WEBSITE"],
            "event_latitude": format_coord(data["LAT"]) if data.get("LAT") else "",
            "event_longitude": format_coord(data["LON"]) if data.get("LON") else "",
            "event_short_description": data["SUMMARY"],
            "organizer_description": data["ORG INFO"],
            "race_benefits": benefits,
            "event_country": "portugal",
            "event_start_time": data.get("EVENT START TIME", ""),
            "event_date_end": data["EVENT END DATE"]
        }
    }

    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ACF-–ø–æ–ª—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:")
    print(json.dumps(acf_data, indent=2, ensure_ascii=False))

    token = get_jwt_token()
    acf_response = send_acf_data(product_id, acf_data, token)

    if acf_response.status_code not in [200, 201]:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ACF:", acf_response.status_code, acf_response.text)
    else:
        print("‚úÖ ACF –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    return product_id